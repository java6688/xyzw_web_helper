name: ci自动化部署到windows服务器

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # 减少检出深度，只获取最新提交
        fetch-depth: 1

    - name: Setup Node.js with cache
      uses: actions/setup-node@v4
      with:
        node-version: '20.19.0'

    - name: Cache pnpm store
      uses: actions/cache@v4
      with:
        path: |
          ~/.pnpm-store
          node_modules
          .next
          .nuxt
          .output
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      run: pnpm install --frozen-lockfile  # 使用固定锁文件，避免解析

    - name: Build project
      run: pnpm build:h5

    - name: Install sshpass efficiently
      run: |
        # 直接安装，跳过更新索引
        sudo apt-get install -y --no-upgrade sshpass

    - name: Parallel deployment preparation
      run: |
        # 准备部署文件
        echo "构建完成，准备部署..."
        echo "H5 构建输出目录:"
        du -sh dist/build/h5/  # 显示 H5 构建产物大小
        echo "目录结构:"
        ls -la dist/build/h5/

    - name: Deploy with optimized transfer
      env:
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        REMOTE_PASSWORD: ${{ secrets.REMOTE_PASSWORD }}
        TARGET_DIR: ${{ secrets.TARGET_DIR }}
      run: |
        echo "=== 开始优化部署 ==="
        set -e  # 遇到错误立即退出

        # 检查 H5 构建产物是否存在
        if [ ! -d "dist/build/h5" ]; then
          echo "❌ 错误: dist/build/h5 目录不存在"
          echo "当前目录结构:"
          find dist/ -type d | sort
          exit 1
        fi

        # 并行执行：同时创建目录和准备传输
        echo "创建目标目录..."
        sshpass -p "$REMOTE_PASSWORD" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 "$REMOTE_USER@$REMOTE_HOST" "if not exist \"$TARGET_DIR\" mkdir \"$TARGET_DIR\"" &

        # 压缩构建产物（如果文件较多）
        if [ $(find dist/build/h5/ -type f | wc -l) -gt 10 ]; then
          echo "文件较多，启用压缩传输..."
          tar -czf h5-build.tar.gz -C dist/build/h5 .
          sshpass -p "$REMOTE_PASSWORD" scp -o StrictHostKeyChecking=no h5-build.tar.gz "$REMOTE_USER@$REMOTE_HOST:$TARGET_DIR/"
          sshpass -p "$REMOTE_PASSWORD" ssh -o StrictHostKeyChecking=no "$REMOTE_USER@$REMOTE_HOST" "cd \"$TARGET_DIR\" && tar -xzf h5-build.tar.gz && del dist.tar.gz"
          rm -f h5-build.tar.gz
        else
          # 直接传输，使用压缩和并行
          echo "直接传输 H5 文件..."
          sshpass -p "$REMOTE_PASSWORD" scp -o StrictHostKeyChecking=no -C -r ./dist/build/h5/* "$REMOTE_USER@$REMOTE_HOST:$TARGET_DIR/" &
        fi

        # 等待所有后台任务完成
        wait

        echo "✅ H5 构建产物部署完成！"